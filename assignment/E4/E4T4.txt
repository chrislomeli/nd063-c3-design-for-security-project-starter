Task 4: Questions and Analysis
What additional architectural change can be made to reduce the internet-facing attack surface of the web application instance.
------------------------------------------------------------------------------------------------------------------------------
 - add a WAF front end 
 - put any application that accesses data (s3) in a private subnet with just an thin Flask ambassador in the public subnet
 - lock down the s3 buckets so thay are only accessible via the application
 - add a vpc endpoint to isolate s3 access from the internet
 - don't provide the secret s3 id to the flask application 


Assuming the IAM permissions for the S3 bucket are still insecure, would creating VPC private endpoints for S3 prevent the unauthorized access to the secrets bucket.
- A VPC endpoint should allow direct access to the s3 buckets

Will applying default encryption setting to the s3 buckets encrypt the data that already exists?
- no - After you enable default AWS KMS encryption on your bucket, Amazon S3 applies the default encryption only to new objects that you upload without any specified encryption settings.

The changes you made above were done through the console or CLI; describe the outcome if the original cloud formation templates are applied to this environment?
- Once the solution is in place the outcome is the same whether it was created in CLI or cloudformation
- But, it should be configured in original cloud formation template, so the solution can be re deployed easily 
- if we had done it that way, we would not need to "manually" fix the resources
